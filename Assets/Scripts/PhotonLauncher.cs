using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;

/// <summary>
/// üöÄ PHOTON LAUNCHER SIMPLE
/// Basado en tutorial est√°ndar de Photon - Enfoque minimalista
/// </summary>
public class PhotonLauncher : MonoBehaviourPunCallbacks
{
    [Header("üéÆ Player Setup")]
    public Transform spawnPoint;
    
    [Header("üîß Debug")]
    public bool showDebugInfo = true;
    
    private bool hasSpawned = false;
    
    void Start()
    {
        Debug.Log("üöÄ PhotonLauncher iniciado");
        
        // Conectar usando la configuraci√≥n ya establecida
        if (PhotonNetwork.IsConnected && PhotonNetwork.InRoom)
        {
            Debug.Log("‚úÖ Ya conectado y en sala - Spawning jugador");
            SpawnPlayer();
        }
        else
        {
            Debug.Log("‚è≥ Esperando conexi√≥n a Photon...");
        }
    }
    
    public override void OnConnectedToMaster()
    {
        Debug.Log("üåê Conectado al Master Server");
        PhotonNetwork.JoinRandomOrCreateRoom();
    }
    
    public override void OnJoinedRoom()
    {
        Debug.Log("üéÆ Entr√© a la sala - Spawning jugador");
        SpawnPlayer();
    }
    
    /// <summary>
    /// üéØ Spawnear jugador en el punto designado
    /// </summary>
    void SpawnPlayer()
    {
        // ‚≠ê CR√çTICO: Solo spawnear UN jugador por cliente
        if (hasSpawned)
        {
            Debug.LogWarning("‚ö†Ô∏è Ya spawne√© un jugador - ABORTANDO");
            return;
        }
        
        // Verificar que no hayamos spawneado ya
        GameObject[] existingPlayers = GameObject.FindGameObjectsWithTag("Player");
        foreach (GameObject existingPlayer in existingPlayers)
        {
            PhotonView pv = existingPlayer.GetComponent<PhotonView>();
            if (pv != null && pv.IsMine)
            {
                Debug.LogWarning($"‚ö†Ô∏è Ya tengo un jugador con PhotonView.IsMine: {existingPlayer.name}");
                hasSpawned = true;
                SetupCameraForPlayer(existingPlayer);
                return;
            }
        }
        
        // Encontrar punto de spawn √∫nico para este jugador
        Vector3 spawnPosition = GetUniqueSpawnPosition();
        
        // Remover IA del spawn point si existe
        RemoveAIFromSpawnPoint(spawnPosition);
        
        // üéØ SPAWN √öNICO: Solo crear MI jugador
        GameObject player = PhotonNetwork.Instantiate("NetworkPlayer", spawnPosition, Quaternion.identity);
        
        if (player != null)
        {
            hasSpawned = true;
            Debug.Log($"‚úÖ MI jugador spawneado en: {spawnPosition} | PhotonView.IsMine: {player.GetComponent<PhotonView>().IsMine}");
            
            // Configurar c√°mara SOLO para MI jugador
            SetupCameraForPlayer(player);
        }
        else
        {
            Debug.LogError("‚ùå Error al spawnear jugador");
        }
    }
    
    /// <summary>
    /// üìç Obtener posici√≥n de spawn √∫nica para cada jugador
    /// </summary>
    Vector3 GetUniqueSpawnPosition()
    {
        // Usar el Actor Number de Photon para posiciones √∫nicas
        int playerIndex = PhotonNetwork.LocalPlayer.ActorNumber - 1;
        
        if (spawnPoint != null)
        {
            // Offset √∫nico por jugador
            Vector3 basePos = spawnPoint.position;
            Vector3 offset = new Vector3(playerIndex * 3f, 0, 0); // 3 metros de separaci√≥n
            return basePos + offset;
        }
        
        // Buscar punto de spawn autom√°ticamente
        GameObject spawnObj = GameObject.FindGameObjectWithTag("Respawn");
        if (spawnObj != null)
        {
            Vector3 basePos = spawnObj.transform.position;
            Vector3 offset = new Vector3(playerIndex * 3f, 0, 0);
            return basePos + offset;
        }
        
        // Posici√≥n por defecto con offset √∫nico
        return new Vector3(playerIndex * 3f, 1, 0);
    }
    
    /// <summary>
    /// ü§ñ Remover IA del punto de spawn
    /// </summary>
    void RemoveAIFromSpawnPoint(Vector3 spawnPosition)
    {
        // Buscar AIs cerca del punto de spawn
        Collider[] nearbyObjects = Physics.OverlapSphere(spawnPosition, 2f);
        
        foreach (Collider obj in nearbyObjects)
        {
            // Buscar objetos con tag "AI" o que contengan "AI" en el nombre
            if (obj.CompareTag("AI") || obj.name.ToLower().Contains("ai"))
            {
                Debug.Log($"ü§ñ Removiendo IA: {obj.name}");
                Destroy(obj.gameObject);
            }
        }
    }
    
    /// <summary>
    /// üì∑ Configurar c√°mara para seguir al jugador
    /// </summary>
    void SetupCameraForPlayer(GameObject player)
    {
        Camera mainCamera = Camera.main;
        if (mainCamera == null) return;
        
        // El script SimplePlayerMovement ya configura la c√°mara autom√°ticamente
        Debug.Log("üì∑ C√°mara ser√° configurada autom√°ticamente por SimplePlayerMovement");
    }
    
    void OnGUI()
    {
        if (!showDebugInfo) return;
        
        GUILayout.BeginArea(new Rect(10, 10, 300, 100));
        GUILayout.Box("üöÄ PHOTON LAUNCHER");
        
        GUILayout.Label($"Conectado: {PhotonNetwork.IsConnected}");
        GUILayout.Label($"En sala: {PhotonNetwork.InRoom}");
        GUILayout.Label($"Jugador spawneado: {hasSpawned}");
        
        if (PhotonNetwork.InRoom)
        {
            GUILayout.Label($"Jugadores en sala: {PhotonNetwork.PlayerList.Length}");
        }
        
        GUILayout.EndArea();
    }
} 